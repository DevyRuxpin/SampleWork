[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "kali-social-media-scraper"
version = "1.0.0"
description = "Professional social media scraper with async support"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Kali Social Media Scraper Team", email = "contact@example.com"}
]
maintainers = [
    {name = "Kali Social Media Scraper Team", email = "contact@example.com"}
]
keywords = ["social media", "scraper", "twitter", "instagram", "facebook", "linkedin", "tiktok"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: HTML",
]
requires-python = ">=3.8"
dependencies = [
    "aiohttp>=3.8.5",
    "beautifulsoup4>=4.12.2",
    "selenium>=4.15.2",
    "playwright>=1.40.0",
    "fake-useragent>=1.4.0",
    "sqlalchemy>=2.0.23",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "loguru>=0.7.2",
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "aiofiles>=23.2.1",
    "httpx>=0.25.2",
    "lxml>=4.9.3",
    "requests>=2.31.0",
    "urllib3>=2.1.0",
    "certifi>=2023.11.17",
    "charset-normalizer>=3.3.2",
    "idna>=3.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
]

[project.scripts]
kali-scraper = "scraper.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/kali-social-media-scraper"
Documentation = "https://github.com/yourusername/kali-social-media-scraper#readme"
Repository = "https://github.com/yourusername/kali-social-media-scraper"
"Bug Tracker" = "https://github.com/yourusername/kali-social-media-scraper/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["scraper*"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["scraper"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "aiohttp.*",
    "beautifulsoup4.*",
    "selenium.*",
    "playwright.*",
    "fake_useragent.*",
    "sqlalchemy.*",
    "typer.*",
    "rich.*",
    "loguru.*",
    "dotenv.*",
    "pydantic.*",
    "aiofiles.*",
    "httpx.*",
    "lxml.*",
    "requests.*",
    "urllib3.*",
    "certifi.*",
    "charset_normalizer.*",
    "idna.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["scraper"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 